---
apiVersion: concourse.govsvc.uk/v1beta1
kind: Pipeline
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: deploy
spec:
  exposed: true
  config:

    github_source: &github_source
      uri: https://github.com/alphagov/verify-proxy-node.git
      organization: alphagov
      owner: alphagov
      repository: verify-proxy-node
      github_api_token: ((github.api-token))
      access_token: ((github.api-token))
      approvers: ((trusted-developers.github-accounts))
      required_approval_count: 2

    task_toolbox: &task_toolbox
      type: docker-image
      source:
        repository: ((concourse.task-toolbox-image))
        tag: ((concourse.task-toolbox-tag))

    openjdk_image: &openjdk_image
      type: docker-image
      source:
        repository: amazoncorretto
        tag: 11

    resource_types:

    - name: github
      type: registry-image
      source:
        repository: ((concourse.github-resource-image))
        tag: ((concourse.github-resource-tag))

    resources:

    - name: release
      type: github-release
      icon: tag
      source:
        <<: *github_source
        tag_filter: ^v2\.\d+$

    - name: daily
      type: time
      icon: update
      source:
        interval: 12h
        start: 8:00 AM
        stop: 8:00 PM

    - name: eidas-config-integration
      type: git
      source:
        uri: https://github.com/alphagov/verify-eidas-config.git
        branch: master
        username: "re-autom8-ci"
        password: ((github.api-token))

    jobs:
    - name: deploy-integration
      serial: true
      plan:

        - get: release
          trigger: true

        - get: daily
          trigger: true

        - get: eidas-config-integration
          trigger: true

        - task: generate-eidas-config
          config:
            platform: linux
            image_resource: *openjdk_image
            inputs:
              - name: eidas-config-integration
            outputs:
              - name: eidas-config-integration
            run:
              dir: eidas-config-integration/tools
              path: ./gradlew
              args:
                - run
                - --args
                - "generate-config --environment=integration"

        - task: create-eidas-config-map
          config:
            platform: linux
            image_resource: *task_toolbox
            inputs:
              - name: eidas-config-integration
            outputs:
              - name: manifests
            params:
              KUBERNETES_SERVICE_ACCOUNT: ((namespace-deployer))
              KUBERNETES_TOKEN: ((namespace-deployer.token))
              NAMESPACE: ((namespace-deployer.namespace))
            run:
              path: /bin/sh
              args:
                - -euc
                - |
                  cd eidas-config-integration/tools

                  echo "configuring kubectl"
                  echo "${KUBERNETES_SERVICE_ACCOUNT}" | jq -r .["ca.crt"] > ca.crt
                  kubectl config set-cluster self --server=https://kubernetes.default --certificate-authority=ca.crt
                  kubectl config set-credentials deployer --token "${KUBERNETES_TOKEN}"
                  kubectl config set-context deployer --user deployer --cluster self
                  kubectl config use-context deployer

                  echo "generating configMap resource definition from file"
                  kubectl -n "${NAMESPACE}" create configmap integration-countries-config --from-file=countriesConfig.yaml -o yaml --dry-run \
                    | yq -y '.metadata += {"annotations": {"kapp.k14s.io/versioned": "", "kapp.k14s.io/num-versions":"5"}}' \
                    | tee ../../manifests/countriesConfigMap.yaml

        - task: render-manifests
          config:
            platform: linux
            image_resource: *task_toolbox
            inputs:
              - name: release
              - name: manifests
            outputs:
              - name: manifests
            params:
              CLUSTER_NAME: ((cluster.name))
              CLUSTER_DOMAIN: ((cluster.domain))
              CLUSTER_PUBLIC_KEY: ((artefact-signing-key.publicKey))
              RELEASE_NAMESPACE: ((namespace-deployer.namespace))
              RELEASE_NAME: integration
              CLOUDHSM_IP: ((cluster.cloudHsmIp))
            run:
              path: /bin/bash
              args:
                - -euc
                - |
                  echo "preparing keyring..."
                  echo "${CLUSTER_PUBLIC_KEY}" > key
                  gpg --import key
                  gpg --export > ~/.gnupg/pubring.gpg
                  echo "verifying package"
                  helm verify ./release/*.tgz
                  echo "rendering chart with release name '${RELEASE_NAME}' and namespace '${RELEASE_NAMESPACE}'..."
                  helm template \
                    --name "${RELEASE_NAME}" \
                    --namespace "${RELEASE_NAMESPACE}" \
                    --set "global.cluster.name=${CLUSTER_NAME}" \
                    --set "global.cluster.domain=${CLUSTER_DOMAIN}" \
                    --set "global.cloudHsm.ip=${CLOUDHSM_IP}" \
                    --set "stubConnector.enabled=true" \
                    --set "stubConnector.trustStore=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" \
                    --set "stubConnector.trustStorePassword=marshmallow" \
                    --set "vsp.secretName=vsp-integration" \
                    --output-dir "./manifests/" \
                    ./release/*.tgz

        - task: deploy-manifests
          timeout: 10m
          config:
            platform: linux
            image_resource: *task_toolbox
            inputs:
              - name: manifests
            params:
              KUBERNETES_SERVICE_ACCOUNT: ((namespace-deployer))
              KUBERNETES_TOKEN: ((namespace-deployer.token))
              KUBERNETES_API: kubernetes.default.svc
              RELEASE_NAMESPACE: ((namespace-deployer.namespace))
              RELEASE_NAME: integration
              APP_NAME: proxy-node
            run:
              path: /bin/bash
              args:
                - -euc
                - |
                  echo "configuring kubectl"
                  echo "${KUBERNETES_SERVICE_ACCOUNT}" | jq -r .["ca.crt"] > ca.crt
                  kubectl config set-cluster self --server=https://kubernetes.default --certificate-authority=ca.crt
                  kubectl config set-credentials deployer --token "${KUBERNETES_TOKEN}"
                  kubectl config set-context deployer --user deployer --cluster self
                  kubectl config use-context deployer

                  echo "applying chart to ${RELEASE_NAMESPACE} namespace..."
                  kapp deploy \
                    -y \
                    --namespace "${RELEASE_NAMESPACE}" \
                    --allow-ns "${RELEASE_NAMESPACE}" \
                    --app "${RELEASE_NAME}-${APP_NAME}" \
                    --diff-changes \
                    -f ./manifests/